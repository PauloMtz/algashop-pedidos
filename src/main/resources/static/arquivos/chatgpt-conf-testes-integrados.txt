-------------------------------- CONFIGURAÃ‡ÃƒO --------------------------------------------
### Como fica no `pom.xml`:

```xml
<build>
    <plugins>
        <!-- Plugin para testes unitÃ¡rios -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.2.5</version>
            <configuration>
                <!-- Executa apenas testes unitÃ¡rios (*Test) -->
                <includes>
                    <include>**/*Test.java</include>
                </includes>
                <excludes>
                    <exclude>**/*IT.java</exclude>
                </excludes>
            </configuration>
        </plugin>

        <!-- Plugin para testes de integraÃ§Ã£o -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.2.5</version>
            <executions>
                <execution>
                    <id>integration-test</id>
                    <goals>
                        <goal>integration-test</goal>
                        <goal>verify</goal>
                    </goals>
                    <configuration>
                        <!-- Executa apenas *IT -->
                        <includes>
                            <include>**/*IT.java</include>
                        </includes>
                        <excludes>
                            <exclude>**/*Test.java</exclude>
                        </excludes>
                        <useModulePath>false</useModulePath>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

---

### Como executar:

* **Rodar sÃ³ testes unitÃ¡rios**

  ```bash
  mvn test
  ```

* **Rodar sÃ³ testes de integraÃ§Ã£o**

  ```bash
  mvn failsafe:integration-test
  ```

* **Rodar tudo (unit + integraÃ§Ã£o)**

  ```bash
  mvn verify
  ```

---

* `Surefire` = seu `test { ... exclude *IT }`
* `Failsafe` = seu `integrationTest { ... include *IT }`

-------------------------------- EXEMPLO DE APLICAÃ‡ÃƒO ----------------------------------------------------

Beleza ðŸš€ vou te mostrar um exemplo **mÃ­nimo e funcional** de `pom.xml` para rodar em **Maven + Java 17**, com:

* `maven-surefire-plugin` â†’ executa apenas `*Test.java` (unitÃ¡rios)
* `maven-failsafe-plugin` â†’ executa apenas `*IT.java` (integraÃ§Ã£o)
* `junit-jupiter` (JUnit 5) configurado corretamente

---

### ðŸ“Œ `pom.xml` completo

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.exemplo</groupId>
    <artifactId>demo-tests</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <!-- VersÃ£o do Java -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <!-- VersÃµes dos plugins -->
        <surefire.version>3.2.5</surefire.version>
        <failsafe.version>3.2.5</failsafe.version>
        <junit.jupiter.version>5.10.2</junit.jupiter.version>
    </properties>

    <dependencies>
        <!-- JUnit 5 (API + Engine para execuÃ§Ã£o) -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Plugin para testes unitÃ¡rios -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.version}</version>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/*IT.java</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- Plugin para testes de integraÃ§Ã£o -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${failsafe.version}</version>
                <executions>
                    <execution>
                        <id>integration-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                            <excludes>
                                <exclude>**/*Test.java</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
```

---

### ðŸ“Œ Estrutura mÃ­nima de pastas

```
src/
 â””â”€â”€ test/
      â””â”€â”€ java/
           â”œâ”€â”€ com/exemplo/ExemploTest.java   # Teste unitÃ¡rio
           â””â”€â”€ com/exemplo/ExemploIT.java     # Teste de integraÃ§Ã£o
```

---

### ðŸ“Œ Exemplos de testes

**`ExemploTest.java` (unitÃ¡rio)**

```java
package com.exemplo;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ExemploTest {
    @Test
    void somaDeveFuncionar() {
        assertEquals(4, 2 + 2);
    }
}
```

**`ExemploIT.java` (integraÃ§Ã£o)**

```java
package com.exemplo;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

class ExemploIT {
    @Test
    void testeDeIntegracao() {
        assertTrue("Hello".startsWith("H"));
    }
}
```

---

### ðŸ“Œ Como rodar

* **Rodar sÃ³ testes unitÃ¡rios**

  ```bash
  mvn test
  ```

* **Rodar sÃ³ testes de integraÃ§Ã£o**

  ```bash
  mvn failsafe:integration-test
  ```

* **Rodar unitÃ¡rios + integraÃ§Ã£o (fluxo completo)**

  ```bash
  mvn verify
  ```

---

ðŸ‘‰ Esse `pom.xml` Ã© pronto para copiar/colar e jÃ¡ funciona em JDK-17.


